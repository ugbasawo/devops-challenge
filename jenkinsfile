pipeline {
    agent {
        docker {
            image 'docker:stable-dind'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        IMAGE_NAME = 'my-static-website'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'apk update && apk add git'
                    sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                    script {
                        sh 'echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin'
                        sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKERHUB_CREDENTIALS_USR}/${IMAGE_NAME}:${IMAGE_TAG}'
                        sh 'docker push ${DOCKERHUB_CREDENTIALS_USR}/${IMAGE_NAME}:${IMAGE_TAG}'
                    }
                }
            }
        }
        stage('Deploy Application') {
            steps {
                script {
                    // Stop and remove any existing container
                    sh '''
                        docker stop ${IMAGE_NAME} || true
                        docker rm ${IMAGE_NAME} || true
                    '''
                    // Run a new container with the built image
                    sh '''
                        docker run -d --name ${IMAGE_NAME} -p 90:90 ${DOCKERHUB_CREDENTIALS_USR}/${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
    }
    post {
        success {
            // Update GitHub commit status to 'success'
            script {
                def commitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                sh "curl -u 'Goziee-git:${GITHUB_TOKEN}' -X POST -H 'Content-Type: application/json' https://api.github.com/repos/<OWNER>/<REPO>/statuses/${commitHash} -d '{\"state\": \"success\", \"description\": \"Build succeeded\", \"context\": \"continuous-integration/jenkins\"}'"
            }
            // Send success email notification
            emailext(
                to: '${NOTIFICATION_EMAIL}',
                subject: "Jenkins Build Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build was successful! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
        failure {
            // Update GitHub commit status to 'failure'
            script {
                def commitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                sh "curl -u 'Goziee-git:${GITHUB_TOKEN}' -X POST -H 'Content-Type: application/json' https://api.github.com/repos/<OWNER>/<REPO>/statuses/${commitHash} -d '{\"state\": \"failure\", \"description\": \"Build failed\", \"context\": \"continuous-integration/jenkins\"}'"
            }
            // Send failure email notification
            emailext(
                to: '${NOTIFICATION_EMAIL}',
                subject: "Jenkins Build Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build failed! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
        always {
            script {
                sh 'docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true'
                sh 'docker logout'
            }
        }
    }
}
